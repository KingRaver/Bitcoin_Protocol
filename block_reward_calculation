// main.cpp - Block reward calculation

int64_t GetBlockValue(int nHeight, int64_t nFees)
{
    int64_t nSubsidy = 50 * COIN;
    
    // Subsidy is cut in half every 210,000 blocks, which will occur approximately every 4 years
    nSubsidy >>= (nHeight / 210000);
    
    return nSubsidy + nFees;
}

bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPool,
                               map<uint256, bool>& mapUnused,
                               bool fBlock, bool fMiner, int64_t& nFees)
{
    // Take over previous transactions' spent outputs
    if (!IsCoinBase())
    {
        for (int i = 0; i < vin.size(); i++)
        {
            // Get prev tx from single transactions in memory
            COutPoint prevout = vin[i].prevout;
            CTransaction& txPrev = mapInputs[prevout.hash];
            
            // Check for conflicts
            if (txPrev.vout[prevout.n].IsSpent())
                return false;
                
            // Check for maturity
            if (IsCoinBase())
                if (nBestHeight - GetTxDepthInMainChain() < COINBASE_MATURITY)
                    return false;
                    
            // Check amount
            if (txPrev.vout[prevout.n].nValue < 0 || txPrev.vout[prevout.n].nValue > MAX_MONEY)
                return false;
                
            // Check for negative or overflow input values
            nValueIn += txPrev.vout[prevout.n].nValue;
            if (nValueIn < 0 || nValueIn > MAX_MONEY)
                return false;
        }
        
        // Verify cryptographic signatures
        if (!VerifySignature(txPrev, *this, i, true, 0))
            return error("ConnectInputs() : VerifySignature failed");
            
        // Check fees
        int64_t nTxFee = nValueIn - GetValueOut();
        if (nTxFee < 0)
            return false;
        if (nTxFee < nMinFee)
            return false;
        nFees += nTxFee;
    }
    else
    {
        // Coinbase transactions can only have one input
        if (vin.size() != 1)
            return false;
            
        // Coinbase transaction output total cannot exceed the block subsidy plus fees
        int64_t nBlockValue = GetBlockValue(pindexBlock->nHeight, nFees);
        if (GetValueOut() > nBlockValue)
            return false;
    }
    
    // Mark outputs spent
    if (fBlock || fMiner)
    {
        for (int i = 0; i < vin.size(); i++)
        {
            COutPoint prevout = vin[i].prevout;
            assert(mapInputs.count(prevout.hash) > 0);
            CTransaction& txPrev = mapInputs[prevout.hash];
            txPrev.vout[prevout.n].SetSpent();
        }
    }
    
    return true;
}
